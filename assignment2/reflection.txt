For Assignment 1, I designed the style checker using an OOP approach, where the logic was written into a class with methods that altered internal state. This made it easier to organize related behaviors. It also required relying on mutable variables, shared state, and side effects through class attributes.
In Assignment 2, I changed the program using functional programming principles. Instead of thinking in terms of objects and state, I focused on writing pure functions that transform inputs and return results without changing any global state. Each function was designed to rely only on its arguments and return new values without consequences.
Ensuring immutability was one of the most notable differences. I avoided reassigning variables and instead used comprehensions and tuples to create new data. This made the code easier to test. I also made sure that the program had data move from one pure function to the next, rather than being stored and updated in an object.